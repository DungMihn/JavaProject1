/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.retail.view;

/**
 *
 * @author macbookprom1
 */
import com.retail.dao.ProductDAO;
import com.retail.model.Product;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

public class ProductPanel extends JPanel {
    private JTable productTable;
    private DefaultTableModel tableModel;
    private JTextField txtSearch;
    private JButton btnAdd, btnEdit, btnDelete, btnSearch;

    private ProductDAO productDAO;

    public ProductPanel() {
        setLayout(new BorderLayout());
        productDAO = new ProductDAO();

        // Ti√™u ƒë·ªÅ
        JLabel lblTitle = new JLabel("üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m", JLabel.CENTER);
        lblTitle.setFont(new Font("Arial", Font.BOLD, 18));
        add(lblTitle, BorderLayout.NORTH);

        // B·∫£ng hi·ªÉn th·ªã s·∫£n ph·∫©m
        String[] columnNames = {"ID", "T√™n s·∫£n ph·∫©m", "Lo·∫°i", "Gi√°", "ƒê∆°n v·ªã", "S·ªë l∆∞·ª£ng", "M√£ v·∫°ch"};
        tableModel = new DefaultTableModel(columnNames, 0);
        productTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(productTable);
        add(scrollPane, BorderLayout.CENTER);

        // Panel ch·ª©c nƒÉng
        JPanel controlPanel = new JPanel();
        controlPanel.setLayout(new FlowLayout());

        txtSearch = new JTextField(20);
        btnSearch = new JButton("üîç T√¨m ki·∫øm");
        btnAdd = new JButton("‚ûï Th√™m");
        btnEdit = new JButton("‚úèÔ∏è S·ª≠a");
        btnDelete = new JButton("üóëÔ∏è X√≥a");

        controlPanel.add(new JLabel("T√¨m s·∫£n ph·∫©m:"));
        controlPanel.add(txtSearch);
        controlPanel.add(btnSearch);
        controlPanel.add(btnAdd);
        controlPanel.add(btnEdit);
        controlPanel.add(btnDelete);

        add(controlPanel, BorderLayout.SOUTH);

        // Load d·ªØ li·ªáu s·∫£n ph·∫©m v√†o b·∫£ng
        loadProductData();

        // X·ª≠ l√Ω s·ª± ki·ªán
        btnSearch.addActionListener(e -> searchProduct());
        btnAdd.addActionListener(e -> new AddProductDialog((JFrame) SwingUtilities.getWindowAncestor(this), this));
        btnEdit.addActionListener(e -> editProduct());
        btnDelete.addActionListener(e -> deleteProduct());

        // Cho ph√©p ch·ªânh s·ª≠a tr·ª±c ti·∫øp tr√™n b·∫£ng v√† t·ª± ƒë·ªông l∆∞u v√†o database
        tableModel.addTableModelListener(e -> {
            if (e.getType() == TableModelEvent.UPDATE) {
                int row = e.getFirstRow();
                updateProductFromTable(row);
            }
        });
    }

    public void loadProductData() {
        tableModel.setRowCount(0);
        List<Product> productList = productDAO.getAllProducts();
        for (Product product : productList) {
            Object[] rowData = {
                product.getProductId(),
                product.getName(),
                product.getCategory(),
                product.getPrice(),
                product.getUnit(),
                product.getStockQuantity(),
                product.getBarcode()
            };
            tableModel.addRow(rowData);
        }
    }

    private void searchProduct() {
        String keyword = txtSearch.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        tableModel.setRowCount(0);
        List<Product> productList = productDAO.searchProducts(keyword);
        for (Product product : productList) {
            Object[] rowData = {
                product.getProductId(),
                product.getName(),
                product.getCategory(),
                product.getPrice(),
                product.getUnit(),
                product.getStockQuantity(),
                product.getBarcode()
            };
            tableModel.addRow(rowData);
        }
    }

    private void editProduct() {
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn s·ª≠a!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int productId = (int) tableModel.getValueAt(selectedRow, 0);
        String name = (String) tableModel.getValueAt(selectedRow, 1);
        String category = (String) tableModel.getValueAt(selectedRow, 2);
        double price = (double) tableModel.getValueAt(selectedRow, 3);
        String unit = (String) tableModel.getValueAt(selectedRow, 4);
        int stockQuantity = (int) tableModel.getValueAt(selectedRow, 5);
        String barcode = (String) tableModel.getValueAt(selectedRow, 6);

        Product product = new Product(productId, name, category, price, unit, stockQuantity, barcode);
        new EditProductDialog((JFrame) SwingUtilities.getWindowAncestor(this), product, this);
    }

    private void deleteProduct() {
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn x√≥a!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?", "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int productId = (int) tableModel.getValueAt(selectedRow, 0);
            productDAO.deleteProduct(productId);
            loadProductData(); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi x√≥a
        }
    }

    // ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong database khi ng∆∞·ªùi d√πng ch·ªânh s·ª≠a tr√™n b·∫£ng JTable
    private void updateProductFromTable(int row) {
        try {
            int productId = (int) tableModel.getValueAt(row, 0);
            String name = (String) tableModel.getValueAt(row, 1);
            String category = (String) tableModel.getValueAt(row, 2);
            double price = Double.parseDouble(tableModel.getValueAt(row, 3).toString());
            String unit = (String) tableModel.getValueAt(row, 4);
            int stockQuantity = Integer.parseInt(tableModel.getValueAt(row, 5).toString());
            String barcode = (String) tableModel.getValueAt(row, 6);

            Product updatedProduct = new Product(productId, name, category, price, unit, stockQuantity, barcode);
            productDAO.updateProduct(updatedProduct);
            JOptionPane.showMessageDialog(this, "‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }
}
